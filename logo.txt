html:
<div class="wrapper">
  <section class="stage-0">
    <div class="logo">
      <div class="elipse elipse1"></div>
      <div class="elipse elipse2"></div>
      <div class="elipse elipse3"></div>
      <div class="elipse elipse4"></div>
      <div class="elipse elipse5"></div>
      <div class="elipse elipse6"></div>
      <div class="elipse elipse7"></div>
      <div class="elipse elipse8"></div>
      <div class="elipse elipse9"></div>
      <div class="elipse elipse10"></div>
      <div class="curved-top">&#9670;KDO ŽELI IMETI&#9670;</div>
      <div class="dollar">? ? ? ? ? ? ? ?</div>
      <div class="title">A B R A H A M</div>
      <div class="curved-bottom">&#9670;KDO ŽELI IMETI&#9670;</div>
      <div class="inner-circle"></div>
    </div>
  </section>
</div>

css:
* {
  margin: 0;
  padding: 0;
  border: 0;
}

html, body {
  height: 100%;
}

body {
  background: #425ca9;
  font-family: Arial Black;
}

.wrapper {
  width: 100%;
  height: 100%;
  background: #425ca9;
  font-family: Arial Black;
}

section {
  
}

.logo {
  width: 500px;
  height: 500px;
  background: #481D64;
  border-radius: 50%;
  position: absolute;
  margin: auto;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  text-shadow: 2px 2px 0px #565454;
  -webkit-text-stroke: 1.5px black;
  .elipse {
    width: 40px;
    height: 420px;
    position: absolute;
    border: 2px solid #B79D2C;
    border-radius: 50% 100%;
    z-index: 5;
    left: 230px;
    top: 40px;
  }
  .elipse1, .elipse3, .elipse5, .elipse7, .elipse9 {
    border: 2px solid #133660;
  }
  @for $i from 1 through 10 {
    .elipse#{$i} {
      transform: rotate(($i * 18)+deg);
    }
  }
  .curved-top {
    transform: rotate(-84.5deg);
    font-size: 24px;
    position: absolute;
    top: 245px;
    left: 0;
    font-weight: bold;
    color: #fff;
    span {
      height: 250px;
      position: absolute;
      width: 25px;
      left: 0;
      top: 0;
      transform-origin: bottom center;
    }
    @for $i from 1 through 100 {
      .char#{$i} {
        transform: rotate(($i*10)+deg);
      }
    }
  }
  .inner-circle {
    width: 380px;
    height: 380px;
    position: absolute;
    background: #001621;
    border: 10px solid #d2e4fa;
    border-radius: 50%;
    margin: auto;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
  }
  .dollar {
    font-family: Garamond, serif;
    font-size: 240px;
    position: absolute;
    z-index: 10;
    color: #C29212;
    left: 45%;
    top: 2%;
    -webkit-text-stroke: .5px black;
    span {
      height: 240px;
      position: absolute;
      width: 25px;
      left: 0;
      top: 0;
      transform-origin: bottom right;
    }
    @for $i from 1 through 100 {
      .char#{$i} {
        transform: rotate(-($i*22.5)+deg);
      }
    }
  }
  
  .title {
    font-size: 60px;
    width: 500px;
    z-index: 10;
    position: absolute;
    font-weight: bold;
    color: #fff;
    text-align: center;
    top: 210px;
    -webkit-text-stroke: 3px black;
    text-shadow: 5px 5px 10px rgba(255,255,255,0.5), -5px -5px 10px rgba(255,255,255,0.5), -5px 5px 10px rgba(255,255,255,0.5), 5px -5px 10px rgba(255,255,255,0.5)
  }
  .curved-bottom {
    transform: rotate(-95deg);
    font-size: 25px;
    position: absolute;
    bottom: 220px;
    left: 0;
    font-weight: bold;
    color: #fff;
    span {
      height: 250px;
      position: absolute;
      width: 25px;
      left: 0;
      top: 0;
      transform-origin: bottom center;
    }
    @for $i from 1 through 100 {
      .char#{$i} {
        transform: rotate(-($i*10)+deg);
      }
    }
  }
}

js:
$(document).ready(function() {
  $('.curved-top, .curved-bottom, .dollar').lettering();
});

(function($){
	function injector(t, splitter, klass, after) {
		var a = t.text().split(splitter), inject = '';
		if (a.length) {
			$(a).each(function(i, item) {
				inject += '<span class="'+klass+(i+1)+'">'+item+'</span>'+after;
			});	
			t.empty().append(inject);
		}
	}
	
	var methods = {
		init : function() {

			return this.each(function() {
				injector($(this), '', 'char', '');
			});

		},

		words : function() {

			return this.each(function() {
				injector($(this), ' ', 'word', ' ');
			});

		},
		
		lines : function() {

			return this.each(function() {
				var r = "eefec303079ad17405c889e092e105b0";
				// Because it's hard to split a <br/> tag consistently across browsers,
				// (*ahem* IE *ahem*), we replace all <br/> instances with an md5 hash 
				// (of the word "split").  If you're trying to use this plugin on that 
				// md5 hash string, it will fail because you're being ridiculous.
				injector($(this).children("br").replaceWith(r).end(), r, 'line', '');
			});

		}
	};

	$.fn.lettering = function( method ) {
		// Method calling logic
		if ( method && methods[method] ) {
			return methods[ method ].apply( this, [].slice.call( arguments, 1 ));
		} else if ( method === 'letters' || ! method ) {
			return methods.init.apply( this, [].slice.call( arguments, 0 ) ); // always pass an array
		}
		$.error( 'Method ' +  method + ' does not exist on jQuery.lettering' );
		return this;
	};

})(jQuery);